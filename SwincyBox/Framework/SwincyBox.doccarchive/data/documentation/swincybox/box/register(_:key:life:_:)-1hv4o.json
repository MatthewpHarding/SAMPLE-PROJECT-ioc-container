{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type = Service.self, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"life"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/LifeType","preciseIdentifier":"s:9SwincyBox8LifeTypeO","text":"LifeType"},{"kind":"text","text":" = .transient, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"factory"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" (("},{"kind":"typeIdentifier","identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Resolver","preciseIdentifier":"s:9SwincyBox8Resolvera","text":"Resolver"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"))"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swincybox\/box\/register(_:key:life:_:)-1hv4o"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-1hv4o","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Call register to add a closure which creates a specific type known as a service. The factory method that creates it will be stored for use each time resolve() is called. Specifying the LifeType will dictate if the returned instance is kept and stored for the lifetime of the box. A transient LifeType will create a new instance with each call to resolve(). A permanent type will store the first created instance returned with each subsequent call. This particular overload of the register function accepts a resolver type as an argument to the factory method which can be used to resolve any dependencies on the type registered."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"life"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LifeType","preciseIdentifier":"s:9SwincyBox8LifeTypeO"},{"kind":"text","text":", (("},{"kind":"typeIdentifier","text":"Resolver","preciseIdentifier":"s:9SwincyBox8Resolvera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"))"}],"title":"register(_:key:life:_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:9SwincyBox0B0C8register_3key4life_yxm_SSSgAA8LifeTypeOxACctlF","modules":[{"name":"SwincyBox"}]},"hierarchy":{"paths":[["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"]]},"references":{"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box":{"role":"symbol","title":"Box","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"abstract":[{"type":"text","text":"A box represents whatâ€™s known as a container, using terminology often used when discussing the Inversion Of Control principle. Each box is used to register and store dependencies, which are known as services and are either stored or created by the box used during registration. A typical usage of SwincyBox would be accessing one box throughout the application lifecycle. However, multiple boxes can be created with an option to even chain them together as children boxes. Please note that when calling the resolve function on a box it becomes a first responder, cascading up through the parent chain until either a dependency is returned or the end of the chain is found and a fatalError() will be thrown."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Box"}],"url":"\/documentation\/swincybox\/box"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Resolver":{"role":"symbol","title":"Resolver","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolver"}],"abstract":[{"type":"text","text":"Resolver typealias has been used to aid the documentation and readability of the code by using standardised IOC Framework terminology"}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Resolver","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Resolver"}],"url":"\/documentation\/swincybox\/resolver"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/LifeType":{"role":"symbol","title":"LifeType","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LifeType"}],"abstract":[{"type":"text","text":"LifeType represents the two states of dependency registration for class instances (reference types) such as, registering a creation factory or instantiating just one single instance. The transient type will register a factory generating new instances with each method call. The permanent type will create a single instance storing it immediately within memory for all future use. These two options do not apply to value types such as structs, which will always return copied data due to the nature of value types and areas of memory."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/LifeType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LifeType"}],"url":"\/documentation\/swincybox\/lifetype"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox":{"role":"collection","title":"SwincyBox","abstract":[{"type":"text","text":"ðŸ“¦ A light-weight Swift dependency injection framework built for iOS. Also known as an IOC Container."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","kind":"symbol","type":"topic","url":"\/documentation\/swincybox"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/register(_:key:life:_:)-1hv4o":{"role":"symbol","title":"register(_:key:life:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"life"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LifeType","preciseIdentifier":"s:9SwincyBox8LifeTypeO"},{"kind":"text","text":", (("},{"kind":"typeIdentifier","text":"Resolver","preciseIdentifier":"s:9SwincyBox8Resolvera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"))"}],"abstract":[{"type":"text","text":"Call register to add a closure which creates a specific type known as a service. The factory method that creates it will be stored for use each time resolve() is called. Specifying the LifeType will dictate if the returned instance is kept and stored for the lifetime of the box. A transient LifeType will create a new instance with each call to resolve(). A permanent type will store the first created instance returned with each subsequent call. This particular overload of the register function accepts a resolver type as an argument to the factory method which can be used to resolve any dependencies on the type registered."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-1hv4o","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/register(_:key:life:_:)-1hv4o"}}}