{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type = Service.self, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"? = nil) -> "},{"kind":"typeIdentifier","text":"Service"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of the service requested. The type of the instance returned may only be different from the typecast it was registered for, either through inheritance or protocol adherence. However, it must match the type it was registered with otherwise a fatalError() is thrown."}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swincybox\/box\/resolve(_:key:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/resolve(_:key:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Call this function to resolve (generate or retrieve) an instance of a type of a registered service. If the service has not yet been registered a fatalError() will be thrown. All services must be registered before the first call to resolve for the matching type with a matching key (or nil). Call this method once only within the application lifecycle."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Service"}],"title":"resolve(_:key:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:9SwincyBox0B0C7resolve_3keyxxm_SSSgtlF","modules":[{"name":"SwincyBox"}]},"hierarchy":{"paths":[["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"]]},"references":{"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box":{"role":"symbol","title":"Box","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"abstract":[{"type":"text","text":"A box represents whatâ€™s known as a container, using terminology often used when discussing the Inversion Of Control principle. Each box is used to register and store dependencies, which are known as services and are either stored or created by the box used during registration. A typical usage of SwincyBox would be accessing one box throughout the application lifecycle. However, multiple boxes can be created with an option to even chain them together as children boxes. Please note that when calling the resolve function on a box it becomes a first responder, cascading up through the parent chain until either a dependency is returned or the end of the chain is found and a fatalError() will be thrown."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Box"}],"url":"\/documentation\/swincybox\/box"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/resolve(_:key:)":{"role":"symbol","title":"resolve(_:key:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Service"}],"abstract":[{"type":"text","text":"Call this function to resolve (generate or retrieve) an instance of a type of a registered service. If the service has not yet been registered a fatalError() will be thrown. All services must be registered before the first call to resolve for the matching type with a matching key (or nil). Call this method once only within the application lifecycle."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/resolve(_:key:)","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/resolve(_:key:)"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox":{"role":"collection","title":"SwincyBox","abstract":[{"type":"text","text":"ðŸ“¦ A light-weight Swift dependency injection framework built for iOS. Also known as an IOC Container."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","kind":"symbol","type":"topic","url":"\/documentation\/swincybox"}}}