{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"languages":["swift"],"platforms":["iOS"]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swincybox\/box"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A box represents whatâ€™s known as a container, using terminology often used when discussing the Inversion Of Control principle. Each box is used to register and store dependencies, which are known as services and are either stored or created by the box used during registration. A typical usage of SwincyBox would be accessing one box throughout the application lifecycle. However, multiple boxes can be created with an option to even chain them together as children boxes. Please note that when calling the resolve function on a box it becomes a first responder, cascading up through the parent chain until either a dependency is returned or the end of the chain is found and a fatalError() will be thrown."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"title":"Box","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:9SwincyBox0B0C","modules":[{"name":"SwincyBox"}],"navigatorTitle":[{"kind":"identifier","text":"Box"}]},"hierarchy":{"paths":[["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/init()"]},{"title":"Instance Properties","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/registeredServiceCount"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/addChildBox(forKey:)","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/childBox(forKey:)","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/clear()","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-1hv4o","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-ytdg","doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/resolve(_:key:)"]}],"references":{"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Calling this function will remove all of the services registered with this current box including all child boxes too."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/clear()"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/resolve(_:key:)":{"role":"symbol","title":"resolve(_:key:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Service"}],"abstract":[{"type":"text","text":"Call this function to resolve (generate or retrieve) an instance of a type of a registered service. If the service has not yet been registered a fatalError() will be thrown. All services must be registered before the first call to resolve for the matching type with a matching key (or nil). Call this method once only within the application lifecycle."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/resolve(_:key:)","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/resolve(_:key:)"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox":{"role":"collection","title":"SwincyBox","abstract":[{"type":"text","text":"ðŸ“¦ A light-weight Swift dependency injection framework built for iOS. Also known as an IOC Container."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","kind":"symbol","type":"topic","url":"\/documentation\/swincybox"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"The constructor used to instantiate an instance of a box. After the class has been initialised the class will then be ready to register each service creation factory."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/init()","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/init()"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/registeredServiceCount":{"role":"symbol","title":"registeredServiceCount","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registeredServiceCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/registeredServiceCount","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/registeredservicecount"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/childBox(forKey:)":{"role":"symbol","title":"childBox(forKey:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"childBox"},{"kind":"text","text":"("},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Box","preciseIdentifier":"s:9SwincyBox0B0C"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Calling this function returns an optional Box for the unique key used to create the box."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/childBox(forKey:)","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/childbox(forkey:)"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/addChildBox(forKey:)":{"role":"symbol","title":"addChildBox(forKey:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addChildBox"},{"kind":"text","text":"("},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Box","preciseIdentifier":"s:9SwincyBox0B0C"}],"abstract":[{"type":"text","text":"Calling this function creates and embeds a new child box, which can then be used as a first responder for all calls to resolve cascading upwards through parent boxes until the dependency is resolved."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/addChildBox(forKey:)","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/addchildbox(forkey:)"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box":{"role":"symbol","title":"Box","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"abstract":[{"type":"text","text":"A box represents whatâ€™s known as a container, using terminology often used when discussing the Inversion Of Control principle. Each box is used to register and store dependencies, which are known as services and are either stored or created by the box used during registration. A typical usage of SwincyBox would be accessing one box throughout the application lifecycle. However, multiple boxes can be created with an option to even chain them together as children boxes. Please note that when calling the resolve function on a box it becomes a first responder, cascading up through the parent chain until either a dependency is returned or the end of the chain is found and a fatalError() will be thrown."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Box"}],"url":"\/documentation\/swincybox\/box"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/register(_:key:life:_:)-ytdg":{"role":"symbol","title":"register(_:key:life:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"life"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LifeType","preciseIdentifier":"s:9SwincyBox8LifeTypeO"},{"kind":"text","text":", (() -> "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"))"}],"abstract":[{"type":"text","text":"Call register to add a closure which creates a specific type known as a service. The factory method that creates it will be stored for use each time resolve() is called. Specifying the LifeType will dictate if the returned instance is kept and stored for the lifetime of the box. A transient LifeType will create a new instance with each call to resolve(). A permanent type will store the first created instance returned with each subsequent call."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-ytdg","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/register(_:key:life:_:)-ytdg"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box/register(_:key:life:_:)-1hv4o":{"role":"symbol","title":"register(_:key:life:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Service"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"life"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LifeType","preciseIdentifier":"s:9SwincyBox8LifeTypeO"},{"kind":"text","text":", (("},{"kind":"typeIdentifier","text":"Resolver","preciseIdentifier":"s:9SwincyBox8Resolvera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Service"},{"kind":"text","text":"))"}],"abstract":[{"type":"text","text":"Call register to add a closure which creates a specific type known as a service. The factory method that creates it will be stored for use each time resolve() is called. Specifying the LifeType will dictate if the returned instance is kept and stored for the lifetime of the box. A transient LifeType will create a new instance with each call to resolve(). A permanent type will store the first created instance returned with each subsequent call. This particular overload of the register function accepts a resolver type as an argument to the factory method which can be used to resolve any dependencies on the type registered."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box\/register(_:key:life:_:)-1hv4o","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/box\/register(_:key:life:_:)-1hv4o"}}}