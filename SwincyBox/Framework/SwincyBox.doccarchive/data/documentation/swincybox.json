{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This small yet powerful iOS framework operates within 201 lines of code applying principles from Swift Generics and light recursion for dependency resolution. A simple "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"},{"type":"text","text":" is all that is required to first register any dependencies ("},{"type":"codeVoice","code":"Services"},{"type":"text","text":"), followed by repeated calls to resolve."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This framework supports the Swift type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" supporting the registration and resolution of both "},{"type":"codeVoice","code":"Classes"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Structs"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a basic example letâ€™s consider using a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"},{"type":"text","text":" for a car creation factory. First, weâ€™ll need to declare a "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class and immediatey register a factory method to generate new instances with each call."}]},{"type":"codeListing","syntax":"swift","code":["class Car { }","let box = Box()","box.register() { Car() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we are ready to create our "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" objects by simply telling our "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"},{"type":"text","text":" what "},{"type":"codeVoice","code":"Type"},{"type":"text","text":" we need to create."}]},{"type":"codeListing","syntax":"swift","code":["let car = box.resolve() as Car"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Itâ€™s that simple!"}]}]}],"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swincybox"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"ðŸ“¦ A light-weight Swift dependency injection framework built for iOS. Also known as an IOC Container."}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"SwincyBox","title":"SwincyBox","symbolKind":"module","role":"collection","modules":[{"name":"SwincyBox"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box"]},{"title":"Variables","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/SwincyVersionNumber"]},{"title":"Type Aliases","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Resolver"]},{"title":"Enumerations","identifiers":["doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/LifeType"]}],"references":{"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Box":{"role":"symbol","title":"Box","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"abstract":[{"type":"text","text":"A box represents whatâ€™s known as a container, using terminology often used when discussing the Inversion Of Control principle. Each box is used to register and store dependencies, which are known as services and are either stored or created by the box used during registration. A typical usage of SwincyBox would be accessing one box throughout the application lifecycle. However, multiple boxes can be created with an option to even chain them together as children boxes. Please note that when calling the resolve function on a box it becomes a first responder, cascading up through the parent chain until either a dependency is returned or the end of the chain is found and a fatalError() will be thrown."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Box","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Box"}],"url":"\/documentation\/swincybox\/box"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/SwincyVersionNumber":{"role":"symbol","title":"SwincyVersionNumber","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwincyVersionNumber"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"}],"abstract":[],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/SwincyVersionNumber","kind":"symbol","type":"topic","url":"\/documentation\/swincybox\/swincyversionnumber"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/LifeType":{"role":"symbol","title":"LifeType","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LifeType"}],"abstract":[{"type":"text","text":"LifeType represents the two states of dependency registration for class instances (reference types) such as, registering a creation factory or instantiating just one single instance. The transient type will register a factory generating new instances with each method call. The permanent type will create a single instance storing it immediately within memory for all future use. These two options do not apply to value types such as structs, which will always return copied data due to the nature of value types and areas of memory."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/LifeType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LifeType"}],"url":"\/documentation\/swincybox\/lifetype"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox":{"role":"collection","title":"SwincyBox","abstract":[{"type":"text","text":"ðŸ“¦ A light-weight Swift dependency injection framework built for iOS. Also known as an IOC Container."}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox","kind":"symbol","type":"topic","url":"\/documentation\/swincybox"},"doc://com.iosbfree.SwincyBox/documentation/SwincyBox/Resolver":{"role":"symbol","title":"Resolver","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolver"}],"abstract":[{"type":"text","text":"Resolver typealias has been used to aid the documentation and readability of the code by using standardised IOC Framework terminology"}],"identifier":"doc:\/\/com.iosbfree.SwincyBox\/documentation\/SwincyBox\/Resolver","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Resolver"}],"url":"\/documentation\/swincybox\/resolver"}}}