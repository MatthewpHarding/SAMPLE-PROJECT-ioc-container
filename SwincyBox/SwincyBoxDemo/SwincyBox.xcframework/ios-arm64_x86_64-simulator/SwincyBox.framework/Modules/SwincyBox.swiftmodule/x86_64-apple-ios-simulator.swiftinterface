// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios15.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwincyBox
import Foundation
import Swift
@_exported import SwincyBox
import _Concurrency
public enum LifeType {
  case transient
  case permanent
  public static func == (a: SwincyBox.LifeType, b: SwincyBox.LifeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias Resolver = SwincyBox.Box
final public class Box {
  final public var registeredServiceCount: Swift.Int {
    get
  }
  public init()
  final public func clear()
  final public func register<Service>(_ type: Service.Type = Service.self, key: Swift.String? = nil, life: SwincyBox.LifeType = .transient, _ factory: @escaping (() -> Service))
  final public func register<Service>(_ type: Service.Type = Service.self, key: Swift.String? = nil, life: SwincyBox.LifeType = .transient, _ factory: @escaping ((SwincyBox.Resolver) -> Service))
  final public func resolve<Service>(_ type: Service.Type = Service.self, key: Swift.String? = nil) -> Service
  final public func addChildBox(forKey key: Swift.String) -> SwincyBox.Box
  final public func childBox(forKey key: Swift.String) -> SwincyBox.Box?
  @objc deinit
}
extension SwincyBox.LifeType : Swift.Equatable {}
extension SwincyBox.LifeType : Swift.Hashable {}
